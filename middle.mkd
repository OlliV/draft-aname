# Introduction
  
Websites hosted by content distribution networks are often served by
multiple IP addresses handling different geographic areas. In many cases,
an initial query for a domain name returns a CNAME record whose \<target\>
is a name served by the CDN, and which ultimately resolves to a different
final answer depending on the client's IP address or subnet, geographic
location, or other considerations.

It is common practice for sites to publish content at the second-level
domain name (sometimes referred to as a "bare domain" or "zone apex": for
example, "example.com" rather than "www.example.com"). However,
[](#RFC1033) forbids the use of CNAME records at the same node as any
other record type. Zone apex nodes always contain SOA and NS RRsets
records, and frequently contain other types such as DNSKEY, MX, TXT/SPF,
etc. Consequently, CNAME is impermissible at apex nodes.

It should be noted that [](#RFC4034) relaxed this restriction by allowing
coexistence between CNAME and RRSIG and NSEC records, but such exceptions
are not applicable to other resource records. RRSIG and NSEC exist to prove
the integrity of the CNAME record; they are not intended to associate
arbitrary data with the domain name.

DNAME [](#RFC6672) is also not a solution, as its function is to redirect
all names in the namespace below the DNAME \<owner\>, not the DNAME
\<owner\> itself. 

Redirecting website lookups to an alternate domain name via SRV or URI
resource records would be an effective solution, but to date this approach
has not been accepted by browser implementations.

As a result of the above, the only widely supported and standards-compliant
way to publish content at a zone apex is to to place A and/or AAAA records
at that node.  THe flexibility afforded by CNAME is not available.

This document proposes a new RR type "ANAME", which provides similar
functionality to CNAME, but only for address queries (i.e., for type A or
AAAA).  The ANAME record can be present at any DNS node, and can coexist
with most other RR types, enabling it to be present at a zone apex.
Authoritative servers configured with ANAME records will answer address
queries for the ANAME owner with addresses found at the ANAME's target, and
also with the ANAME itself. Recursive resolvers which understand ANAME can
re-query for the ANAME target, just as if they had received a CNAME
response.

## Terminology

"Address type" refers to a DNS RR type that encodes a network address.
Currently the set of address types consists of A and AAAA.

"Address query" refers to a DNS query for any address type.

## Reserved Words

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in [](#RFC2119).
    
# The ANAME Resource Record

This document specifies a new DNS resource record type ANAME, with RR
code point [TBD].

The ANAME presentation format is identical to that of CNAME [](#RFC1033):
```
    owner ttl class ANAME target
```
The wire format is also identical to CNAME, except that name compression
is not permitted in ANAME RDATA, per [](#RFC3597).

No more than one ANAME resource record can be present at any DNS node.

# Authoritative Server Behavior

When an ANAME record is present at a DNS node and a query is received by an
authoritative server for type A or AAAA, the authoritative server returns
the ANAME RRset in the answer section.

For the benefit of querying resolvers that do not implement ANAME, the
authoritative server also returns address records as described below.
(This is similar to the synthesized CNAME record included with DNAME
[](#RFC6672).)

Authoritative servers implementing ANAME MUST be equipped resolve the ANAME
\<target\> on the querying resolver's behalf, either by sending queries to
an external recursive resolver, or by implementing recursive resolution
logic internally.

If the ANAME \<target\> returns a chaining response (i.e., CNAME or DNAME),
then the authoritative server MUST follow it until it is able to resolve an
address response.

## Address records returned with ANAME

If the original query is for type A, and an RRset of type A exists at the
ANAME \<target\>, then that A RRset (with \<owner\> changed to match that
of the ANAME RR), MUST be appended to the answer section after the ANAME
RRset.  If an AAAA RRset is also known to exist at the ANAME \<target\>,
then the AAAA RRset MAY be appended to the additional section (again, with
\<owner\> changed to match that of the ANAME RR).

Similarly, if the original query was for type AAAA, and an AAAA RRset
exists at the ANAME \<target\>, then it is appended to the answer section,
and if an A RRset also exists at the ANAME \<target\> then it MAY be appended
to the additional section.

If the original query is for type ANAME, A and AAAA records MAY be returned
in the additional section.

How and when an authoritative server resolves the A and AAAA responses from
the ANAME \<target\> (when it is not itself authoritative for \<target\>) is
unspecified. If the authoritative server is capable of performing recursive
resolution, then it MAY resolve the query itself, or it MAY send address
queries to an external resolver.  It MAY send address queries to the ANAME
\<target\> when loading the zone and store the responses locally, or it MAY
delay resolution of the address records until a query is received for the
ANAME \<owner\>. In either case, for performance reasons, it is RECOMMENDED
that address records be cached locally by the authoritative server.

[REMOVE BEFORE PUBLICATION: Peter has suggested we allow the address records
for an ANAME to be populated during \*XFR. This adds complexity in some
ways, as the transfered A and AAAA could not be treated as zone data but
as cache, but it simplifies other things such as signing. - each]

Address records cached locally MUST have a limited TTL.  The initial TTL
for locally-cached address records MUST be set to the lesser of the ANAME
TTL and the TTL of the address records retrieved from the ANAME \<target\>.
The local TTL MUST count down, just as it would in a conventional resolver
cache.  Records with an expired TTL MUST NOT be returned until refreshed
with a new query to the ANAME \<target\>.

If configured to do so, then the authoritative server MAY, when sending
queries to the ANAME \<target\>, include an EDNS CLIENT-SUBNET (ECS)
option [](#RFC7871), either forwarding an ECS option that was sent
to it by the querying resolver, or generating a new ECS option from the
querying resolver's address.  If a response from the ANAME \<target\>
includes an ECS option with a SCOPE PREFIX-LENGTH greater than zero, the
response SHOULD be cached with the ECS data and should only be used in
response to queries from the same client subnet.

[REMOVE BEFORE PUBLICATION: Some suggestions have been made about signaling
ANAME capability via an EDNS option. If a query indicated that the client
understood ANAME, then the authority could respond differently. This may
turn out to be necessary, but I want to hold off on specifying it until
we're sure that it is. - each]

## Coexistence with other types

If the zone is configured with an A RRset with the same owner as ANAME,
then the ANAME MUST NOT be returned for queries of type A.

Similarly, if ANAME coexists with AAAA, then ANAME MUST NOT be returned for
queries of type AAAA.

If ANAME coexists with both A and AAAA RRsets, then the ANAME MUST NOT be
returned under any circumstances. If a zone is configured with all three of
ANAME, A, and AAAA at the same node, the server MAY treat this as an error
condition and reject the zone.

[REMOVE BEFORE PUBLICATION: I wrote the above thinking that someone might
want to use ANAME for A or AAAA but not both. Existing implementations
apparently handle coexistence with A and AAAA differently. Some simply add
the locally defined A/AAAA to the expanded ANAME response. A suggestion has
been made that this could be used as a fallback in the event of resolution
failure, or a suggestion about address preference. We'll need to settle
this. - each]

ANAME MUST NOT coexist with CNAME, or any other RR type that restricts
the types with which it can itself coexist.

ANAME can freely coexist at the same owner name with any other RR type.

## DNSSEC signing

If the zone in which the ANAME resides is DNSSEC signed, and if the server
has access to the private zone-signing key, then the A and AAAA RRsets MUST
be signed, either in advance when populating the A/AAAA answers for the
ANAME records, or "on the fly" when responding to a query.

If the server does not have access to the private zone-signing key then it
MAY return unsigned address records, but this is NOT RECOMMENDED unless
every resolver with access to the zone is known to support ANAME (as might
be the case in a split-horizon deployment where ANAME records are only
served to an internal network with its own resolvers).

Validating resolvers which do not yet implement ANAME will not be able to
validate the A and AAAA responses included with an ANAME response unless
those responses are validly signed by a DNSKEY at the apex of the zone in
which the ANAME resides.  Passing along the RRSIGs associated with the
original A and AAAA RRsets from the ANAME \<target\> will not be sufficient
for DNSSEC validation.

Implementers MAY allow address records associated with the ANAME to be
populated and signed by the primary server, then sent along with their
RRSIGs to secondaries via zone transfer. In this case, the master server
MUST refresh the address records when their TTLs expire and MUST inform
secondary servers via DNS NOTIFY that they need to refresh the zone. The
secondary MUST store address information and associated RRSIGs supplied via
zone transfer in cache such that its TTL will count down and force a
refresh query.

If this address record expansion and signing during zone transfer is not
supported, then every authoritative server providing ANAME responses
in a signed zone SHOULD have access to the private zone-signing key for
that zone.  Deployment of ANAME in signed zones where address records
cannot be signed due to lack of access to the private zone-signing key is
NOT RECOMMENDED.

When ANAME is present in a signed DNS node, the type bit map in the NSEC
[](#RFC4034) or NSEC3 [](#RFC5155) record for that node MUST include at
least one of A and AAAA as well as ANAME. This is for the benefit of
validating resolvers not implementing ANAME which may use a signed proof
of nonexistence for type A and AAAA to prevent address queries from being
resolved. The type bit map SHOULD only include address types which are
known to exist at the ANAME \<target\>.

# Recursive Server Behavior

When a recursive resolver sends a query of type A or AAAA and receives a
response with an ANAME RRset in the answer section, it MUST re-query for
the ANAME \<target\>.  This is necessary because, in some cases, the
address received will be dependent on network topology and other
considerations, and the resolver will find a different answer than the
authoritative server did.

If resolution fails -- for example, due to the local resolver being
nonfunctional or the ANAME \<target\> zone being unreachable -- then the
resolver MAY use the address records that were included in the
authoritative response as a fallback.

If configured to do so, the resolver MAY include an EDNS CLIENT-SUBNET
option [](#RFC7871) both when sending the initial query to the ANAME
\<owner\> and when re-querying for the ANAME \<target\>. If the response
includes a SCOPE PREFIX-LENGTH greater than zero, the response SHOULD be
cached with the ECS data and should only be used in response to queries
from the same client subnet.

# Operational Considerations

When a zone containing ANAME records is transferred to a secondary
server, the ANAME records are transferred, but the A or AAAA records
retrieved from the ANAME \<target\> are not. If the primary server
implements ANAME but the secondary server does not, then the two will
return different answers for address queries. It is therefore RECOMMENDED
that ANAME not be deployed in a zone unless all of the authoritative
servers for that zone implement ANAME.

# Security Considerations

An authoritative server which implements ANAME must resolve address
queries on behalf its clients, either internally or by querying an
external resolver. This resolution must be allowed to take place
regardless of whether the client would ordinaily have been permitted
by local policy to send recursive queries.

When a resolver that does not understand ANAME receives a response
containing A or AAAA records with \<owner\> rewritten to match that of the
ANAME RR, this may bypass security mechanisms based on local policy
limiting access to the original ANAME \<target\>.
 
A validating resolver that does not understand ANAME will not be able to
validate A and AAAA records unless they are signed.

# IANA Considerations

IANA is requested to allocate a DNS RR type code for the ANAME RR type.

# Acknowledgments

Thanks to Mukund Sivaraman, Stephen Morris, Ray Bellis, and Mark Andrews
for discussion and feedback.
